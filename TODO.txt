-- TODO --

# Make only transforms that have moved the last frame update their data to GPU.s

[X] Simplifying _ECS::Systems creation, there is a lot of repetition between Systems.
  A system is just a set of functions that do operations on some entity components.
	[X] Creating my own vector so that the system object can be allocated with calloc ?

# Create transform hierarchy.

# Simplifying the GraphicsPipeline creation (like texture).

# Having multiple materials and instance that are rendered in a given order.
	## As a test, rendering the same model twice that have different materials.

# The last task will allow us to easily render gizmos for the editor.

# Vulkan : how to use GraphicsPipeline cache ? can this be used to simply multiple pipeline creation ?

-- DONE --

# Creating the Input system.
	[X] ## That provides simple way to query if mouse, or key has been pressed this frame, released this frame or is on hold.

# Creating a debug console in ImGUI.
	[X] ## Having a simple command that print something to logs.

Goal : Having a command that shows transform with the associated Entity ID (it's pointer address at least) ?
  SubGoals :
	 [X] Centralizing the game camera data to a system instead of handling logic in the Camera component.


-- Graphics improvements --

# Instead of having multiple small vulkan buffer, we can have a single one that manually fragment and allocate memory on need.
# The MeshDrawSystem updates the model matrix for every Transforms. However, if the transform doesn't move, the matrix is still pushed to GPU. Thus we can implement a system that track if transform have changed
  from the last frame. If that's the case, the MeshDrawSystem pushes data to the gpu.

-- Log term improvements --

# The material definition is hard coded (vertex buffer type, input shader parameters).
  We could potentially implement a system that read a single configuration object and create the material and it's instances accordingly.
  That would require much more work (finding a generic way to define parameters, createing appropriate structures from it).
  For now, such a system is not needed.
# The same goes for the GraphicsPipeline associated to the shader.

-- ECS --
[X] # Provinding a uniquea and safe way to get the child component.

-- --

[X] - # Fixing the Transform system to be able to retrieve the Model matrix correctly.

[X] - # Creating the Camera component.
[X] - # Setting up Camera BufferObject.
	-> Single VulkanBuffer containing the view and perspective matrices.
	-> Binded before binding the graphics pipeline

-- Texture --
[X] # Cleaning and separating the dependency between MaterialInstance and Texture.
[X] # MaterialInstance source data are the same and not cached. (using the same instance for example ?)