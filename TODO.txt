-- TODO --

# Vulkan : how to use GraphicsPipeline cache ? can this be used to simply multiple pipeline creation ?





~~ LONG TERM OBJECTIVES ~~

-- Graphics improvements --

# Instead of having multiple small vulkan buffer, we can have a single one that manually fragment and allocate memory on need.



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


-- DONE --


-- Materials Generalizaion --

[X] # Simplifying the GraphicsPipeline creation (like texture).

[X] # Having multiple materials and instance that are rendered in a given order.
	[X] ## Removing Material instance value from MeshRenderer ? Only a pointer is necessary (and allocate the instance on the heap).
	[X] ## How to handle clearing value ? Is it possible to create a render pass only for clearing at the beginning ?
	[X] ## As a test, rendering the same model twice that have different materials.

[X] # Moving MeshStep creation to ECS system instead of mesh renderer component.


-- Transforms --

[X] # Make only transforms that have moved the last frame update their data to GPU.s

[X] Simplifying _ECS::Systems creation, there is a lot of repetition between Systems.
  A system is just a set of functions that do operations on some entity components.
	[X] Creating my own vector so that the system object can be allocated with calloc ?

[X] # Create transform hierarchy.



-- Input --

# Creating the Input system.
	[X] ## That provides simple way to query if mouse, or key has been pressed this frame, released this frame or is on hold.

# Creating a debug console in ImGUI.
	[X] ## Having a simple command that print something to logs.

Goal : Having a command that shows transform with the associated Entity ID (it's pointer address at least) ?
  SubGoals :
	 [X] Centralizing the game camera data to a system instead of handling logic in the Camera component.

-- ECS --
[X] # Provinding a uniquea and safe way to get the child component.

-- --

[X] - # Fixing the Transform system to be able to retrieve the Model matrix correctly.

[X] - # Creating the Camera component.
[X] - # Setting up Camera BufferObject.
	-> Single VulkanBuffer containing the view and perspective matrices.
	-> Binded before binding the graphics pipeline

-- Texture --
[X] # Cleaning and separating the dependency between MaterialInstance and Texture.
[X] # MaterialInstance source data are the same and not cached. (using the same instance for example ?)