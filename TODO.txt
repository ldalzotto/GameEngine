-- TODO --

-- Gizmo Drawer --

[X] # Adding configuration properties for GraphicsPipeline to draw wire lines.
[X] # Creating a gizmo material (no depth testing, line).
[X] # Gizmos are rendered by pushing commands every frame. For each frame, these commands are consumed and executed.
[X] # Clearing the generic Graphics pipeline from ifs. And removing material type.

-- ECS --

# Adding the choice for the EntityConfigurableContainer to only trigger events (no storage of Entities).

-- Gizmo Drawer --

[X] # MeshBoundBox gizmos rendering must be done to a specific system. (owned by the editor module.).
[X] # Adding rendering order to materials.

-- ECS --

# Right now, the ECS engine is immediate. This means that Entities, Component and Systems are created immediately when asked (and the associated events are also triggered immediately).
  Is we imagine that a System creates a child Entity on the fly when component is attached, this can create some undefined behavior.
  Also, in the future it may be safre to defere ECS operations inside a multithreaded environment. 
  
  ## Deferring every ECS Engine operations (Entity creation, System creation, Component creation) :
	- Creating a single entry point that dispach requested message.
	- Creating a sync entry point that consume messages until there is no more.

-- Materials --

# Adding configuration properties for rendering order
# Adding configuration properties for blending (editor 3D gizmo may be transparent ?)

-- Inputs --

# Implementing mouse detection input and easily get it's screen position.

~~ LONG TERM OBJECTIVES ~~

-- Graphics improvements --

# Instead of having multiple small vulkan buffer, we can have a single one that manually fragment and allocate memory on need.



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


-- DONE --


-- ECS --

[X] # Custom container for ECS components (instead of unordered_map which may not be as efficient as linear search for small amount of entries).

-- Math --

[X] # Creating my own math library. Removing dependencies from glm.

-- Physics/MeshRenderer --

# The MeshRenderer has a Bounding BOX axis aligned in local space that is calculated only once based on vertices local positions.
	[X] ## Having a child object for ECS system (like component).
	[X] ## The MeshRendererBoundingBoxSystem reacts to the presence of MeshRenderer and MeshRendererBound. On creation, a bound calculation operation is added to a vector that is consumed by the system.


-- Materials Generalizaion --

[X] # Simplifying the GraphicsPipeline creation (like texture).

[X] # Having multiple materials and instance that are rendered in a given order.
	[X] ## Removing Material instance value from MeshRenderer ? Only a pointer is necessary (and allocate the instance on the heap).
	[X] ## How to handle clearing value ? Is it possible to create a render pass only for clearing at the beginning ?
	[X] ## As a test, rendering the same model twice that have different materials.

[X] # Moving MeshStep creation to ECS system instead of mesh renderer component.


-- Transforms --

[X] # Make only transforms that have moved the last frame update their data to GPU.s

[X] Simplifying _ECS::Systems creation, there is a lot of repetition between Systems.
  A system is just a set of functions that do operations on some entity components.
	[X] Creating my own vector so that the system object can be allocated with calloc ?

[X] # Create transform hierarchy.



-- Input --

# Creating the Input system.
	[X] ## That provides simple way to query if mouse, or key has been pressed this frame, released this frame or is on hold.

# Creating a debug console in ImGUI.
	[X] ## Having a simple command that print something to logs.

Goal : Having a command that shows transform with the associated Entity ID (it's pointer address at least) ?
  SubGoals :
	 [X] Centralizing the game camera data to a system instead of handling logic in the Camera component.

-- ECS --
[X] # Provinding a uniquea and safe way to get the child component.

-- --

[X] - # Fixing the Transform system to be able to retrieve the Model matrix correctly.

[X] - # Creating the Camera component.
[X] - # Setting up Camera BufferObject.
	-> Single VulkanBuffer containing the view and perspective matrices.
	-> Binded before binding the graphics pipeline

-- Texture --
[X] # Cleaning and separating the dependency between MaterialInstance and Texture.
[X] # MaterialInstance source data are the same and not cached. (using the same instance for example ?)