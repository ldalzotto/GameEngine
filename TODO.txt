-- TODO --

[] Lightning calculation is wrong when the model is scaled.








[X] # Flat shading - Using precalculated normals for backface culling
	-> Allowing the imported mesh to store precalculated normals. As the same as vertex, normals per vertex per polygons are stored in the RReander heap.
	-> Adding a normal index in the polygon pipeline. The same as the vertex index.
	-> Updating the polygon backface culling to use world normals calculated from precalculated normals.
	
[X] # Flat shading - Shading the pixel
	-> Adding shading information in material.
	-> During data initialization, when the material is FLAT_SHADED, push a FlatShading lightning calculation in a memory buffer.
	-> If the polygon is not culled, storing the world normal to a new "VertexVarying" memory buffer. And assing the index to the polygon.
	-> Consume and perform the FlatShading lightning calculation in a memory buffer after the backface culling (to ensure that world normals have been calculated).
	-> Use the calculated result to modify the final color of the pixel.

[X] Entity Selection - The Guide plane is not correctly oriented, instead of begin fixed for direction axes it must depend of the camera position : 
	- Position & Scale : The plane normal must face the camera as mush as possible, by staying // to the axis involved. We create a plane perpendicular to the direction, then we project the camera position to it. The direction from
		the projected point will give us the wanted normal vector of the guide plane.
	- Rotation : The plane is always facing the camera.


-- 3D Models --

[X] # Creating an .obj file importer that converts to the new mesh object

-- RenderV2 --

[X] # There is some artifact when cube lines are near the border of the texture (I think that it's the clip algorithm that is not accurate).
[X] # Extracting (object culling)/(backface culling)/(rasterization alg)/(texture writing) to separate files with their on functions.
# Making the final Rendering texture at a finite size.

# Migrating the gizmo renderer from the old to the new engine.

[X] # Ensuring that the Mouse coordinates are the same as the old engine.

# Plugging the wireframe renderer to the old ECS system.
	-> This leads to the removal of the Vulkan dependency.
	-> Because the new render engine doesn't handle texture mapping yet, the assimp dependency is also removed.

-- Core --

# Extracting data container template methods from object definition.
	-> This is to reduce compilation time when we add/remove a method

-- RenderV2 --

# Trygin to add openCL for parallel processing ?

-- Math --

# Cleaning the usage of min/max with numerical comparison with tolerance.

-- Camera --

# Storing WorldToClip and ClipToWorld matrices ?

-- Rendering --

# Refactoring the fact that MaterialInstances allocate external resource immediately.










~~ LONG TERM OBJECTIVES ~~

-- Editor Gizmo - further improvements --

# Gizmo directions is based on an orthonormal basis. When the Entity is skewed (scaled and rotated), the coordinate system is no
  more orthonormal. Thus, arrows direction must be rearranged from calculated local directions of the Entity transform, instead of begin fixed.

-- Resources --

# Implementing my own 3D model exporter in blender and imported in the GameEngine to have total control about Mesh loading and directly mapping to known data.

-- Editor GUI --

# Removing dependencies to the IMGui library. This will involve :
	## Creating my own GUI Layout system. (maybe we can have somthing similar to unity ?)

-- Graphics improvements --

# Instead of having multiple small vulkan buffer, we can have a single one that manually fragment and allocate memory on need.
# Using pipeline cache
# Simplifying the creation of a VulkanBuffer that is not host visible (staged buffer) (push is done with a temporary buffer).
	## Switching some ShaderParameter to the new smart staging buffer ?

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

-- DONE --


-- Removing GLFW dependency --

[X] - # Creating a window from Windows api (see https://github.com/ldalzotto/Window_RenderTexture_Test).
[X] - # Updating the Window class to make it platform specific.
[X] - # Updating the Render engine to make vulkan use the created window (see https://harrylovescode.gitbooks.io/vulkan-api/content/chap05/chap05-windows.html).
[X] - # Updating the ImGUI lib to not use glfw (see https://github.com/ocornut/imgui/blob/master/examples/imgui_impl_win32.h).
[X] - # Updating the InputSystem so that input event are triggered from the Windows window.

-- Editor - Transform Gizmo --

# Creating a Transform Gizmo.
	[X] # With a special Material that is not dependant of the camera projection ? (to always have the same size on screen).
		-> NO - We will update the transform gizmo position to alwayw be at a fixed distance from the camera (and the size will always be the same).
	[X] # Allowing materials to not compare the depth buffer.
	[X] # Having a default value for MaterialInstance texture input.

[X] # FIX - The sorting order is incorrect for the update sequencer
[X] # Having arrow Transform that allow movement of the selected entity.
[X] # Having rotation gizmo that allow rotatin the selected entity.
[X] # Having scale gizmo that allow scaling the selected entity.

-- Math - Refactoring --

[X] # Upgrading the Segment math object so that it can take any vector.
[X] # Creating a helper method to multiply a matrix with a direction.

-- Editor Gizmo - further improvements --

[X] # Set the guide plane orientation only once when the transformation has started. This is to avoid chaotic behavior if the entity is moving from another source, or rotation when skewed.
[X] # Dont display arrow, rotation and scale at the same time. Instead, binding a key to active a transformation.

-- Transform --

[X] # Setting World position. 
[X] # Setting World rotation.
[X] # Setting World scale.

-- Math --

[X] # Refactoring the math library so that different type vector uses the same code.

-- Testing --

[X] # Moving the Sandbox application to a test package. Were multiple case can be easily tested.

-- ECS --

[X] # Adding type safety to system and components with the new template system.
[X] # For Systems, reimplement system so that involved components are cached.
[X] # Simplifying sytem initialization with function toolbox (and templates ?).

-- 1st Milestone -- 

[X] Creating a first milestone application that showcase all implemented features :
	## Transform parenting, rotation, ...
	## AABB physics detection

-- Documentation --

[X] Creating a documentation format in html/css that will be used to functionaly describe the architecture of the GameEngine.
This documentation will discuss about : 
	## The main execution flow of the game engine.
	## Generalization of procedures. (Like MaterialInstance creation for render)
	## How data is organized. (Like Texture, Material ...). Maybe having a data hierarchy graph ?
	## Why some system implementation details are made.
	## A very small description of what systems/algorithm can do with their limitation and future improvements.
This documentation won't discuss of :
	## Implementation details of algorithm.
	## What every method is doing (we are never talking about code)..

-> NO, documentation is test.

-- Data Structures --

[X] Separating Structure operation from object.
[X] Instead of locking operations to only one king of structure, creating generic object (like Iterator, Writer, ...) that can be created from structures. Then
    algorithm are executed on them instead of data structures.


-- Materials --

[X] # Adding configuration properties for rendering order

-- Inputs --

[X] # Implementing mouse detection input and easily get it's screen position.


-- Gizmo Drawer --

[X] # Adding configuration properties for GraphicsPipeline to draw wire lines.
[X] # Creating a gizmo material (no depth testing, line).
[X] # Gizmos are rendered by pushing commands every frame. For each frame, these commands are consumed and executed.
[X] # Clearing the generic Graphics pipeline from ifs. And removing material type.

-- Gizmo Drawer --

[X] # MeshBoundBox gizmos rendering must be done to a specific system. (owned by the editor module.).
[X] # Adding rendering order to materials.

-- Log --

[X] # Creating my own Log library that defer log messages.

-- ECS --

[X] # REFACTOR - Moving the Engine sequencer to a SortedVector.

[X] # Right now, the ECS engine is immediate. This means that Entities, Component and Systems are created immediately when asked (and the associated events are also triggered immediately).
  Is we imagine that a System creates a child Entity on the fly when component is attached, this can create some undefined behavior.
  Also, in the future it may be safre to defere ECS operations inside a multithreaded environment. 
  
  ## Deferring every ECS Engine operations (Entity creation, System creation, Component creation) :
	- Creating a single entry point that dispach requested message.
	- Creating a sync entry point that consume messages until there is no more.

-- ECS --

[X] # Custom container for ECS components (instead of unordered_map which may not be as efficient as linear search for small amount of entries).

-- Math --

[X] # Creating my own math library. Removing dependencies from glm.

-- Physics/MeshRenderer --

# The MeshRenderer has a Bounding BOX axis aligned in local space that is calculated only once based on vertices local positions.
	[X] ## Having a child object for ECS system (like component).
	[X] ## The MeshRendererBoundingBoxSystem reacts to the presence of MeshRenderer and MeshRendererBound. On creation, a bound calculation operation is added to a vector that is consumed by the system.


-- Materials Generalizaion --

[X] # Simplifying the GraphicsPipeline creation (like texture).

[X] # Having multiple materials and instance that are rendered in a given order.
	[X] ## Removing Material instance value from MeshRenderer ? Only a pointer is necessary (and allocate the instance on the heap).
	[X] ## How to handle clearing value ? Is it possible to create a render pass only for clearing at the beginning ?
	[X] ## As a test, rendering the same model twice that have different materials.

[X] # Moving MeshStep creation to ECS system instead of mesh renderer component.


-- Transforms --

[X] # Make only transforms that have moved the last frame update their data to GPU.s

[X] Simplifying _ECS::Systems creation, there is a lot of repetition between Systems.
  A system is just a set of functions that do operations on some entity components.
	[X] Creating my own vector so that the system object can be allocated with calloc ?

[X] # Create transform hierarchy.



-- Input --

# Creating the Input system.
	[X] ## That provides simple way to query if mouse, or key has been pressed this frame, released this frame or is on hold.

# Creating a debug console in ImGUI.
	[X] ## Having a simple command that print something to logs.

Goal : Having a command that shows transform with the associated Entity ID (it's pointer address at least) ?
  SubGoals :
	 [X] Centralizing the game camera data to a system instead of handling logic in the Camera component.

-- ECS --
[X] # Provinding a uniquea and safe way to get the child component.

-- --

[X] - # Fixing the Transform system to be able to retrieve the Model matrix correctly.

[X] - # Creating the Camera component.
[X] - # Setting up Camera BufferObject.
	-> Single VulkanBuffer containing the view and perspective matrices.
	-> Binded before binding the graphics pipeline

-- Texture --
[X] # Cleaning and separating the dependency between MaterialInstance and Texture.
[X] # MaterialInstance source data are the same and not cached. (using the same instance for example ?)